@model Bazza.ViewModels.Admin.IndexViewModel

<h1 class="title">Dashboard</h1>

<div class="columns">
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.DistinctBy(x => x.PersonId).Count()
                </p>
                <p class="subtitle">
                    Registrierungen<br/>
                    Davon <b> @Model.ArticlesInternalOnly.DistinctBy(x => x.PersonId).Count()</b> aus der Mütterrunde
                </p>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Count
                </p>
                <p class="subtitle">
                    Artikel<br/>
                    Davon <b> @Model.ArticlesInternalOnly.Count()</b> aus der Mütterrunde
                </p>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Sum(x => x.Price).ToString("N2") €
                </p>
                <p class="subtitle">
                    Artikelwert<br/>
                    Davon <b> @Model.ArticlesInternalOnly.Sum(x => x.Price) €</b> aus der Mütterrunde
                </p>
            </div>
        </div>
    </div>
</div>

<div class="columns">
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.SalesCount
                </p>
                <p class="subtitle">
                    Verkäufe<br/>
                    Davon <b>@Model.EmptySalesCount</b> ohne Artikel.
                </p>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Count(x => x.IsSold)
                </p>
                <p class="subtitle">
                    Artikel verkauft (@((100d / Model.Articles.Count * Model.Articles.Count(x => x.IsSold)).ToString("N2")) %)<br/>
                    Davon <b> @Model.ArticlesInternalOnly.Count(x => x.IsSold)</b> aus der Mütterrunde
                </p>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Where(x => x.IsSold).Sum(x => x.Price).ToString("N2") €
                </p>
                <p class="subtitle">
                    eingenommen (@((100d / Model.Articles.Sum(x => x.Price) * Model.Articles.Where(x => x.IsSold).Sum(x => x.Price)).ToString("N2")) %)<br/>
                    Davon <b> @Model.ArticlesInternalOnly.Where(x => x.IsSold).Sum(x => x.Price) €</b> aus der Mütterrunde
                </p>
            </div>
        </div>
    </div>
</div>
<div class="columns">
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Where(x => !x.IsExemptFromFees).Sum(x => x.Provision).ToString("N2") €
                </p>
                <p class="subtitle">
                    Provision verdient insgesamt<br/>
                    <b>@Model.Articles.Where(x => x.IsExemptFromFees).Sum(x => x.Provision).ToString("N2") €</b> nicht gezählt wegen keinen/geringen Verkäufen.
                </p>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Where(x => !x.IsExemptFromFees).Sum(x => x.Fee).ToString("N2") €
                </p>
                <p class="subtitle">
                    Einschreibgebühr verdient<br/>
                    <b>@Model.Articles.Where(x => x.IsExemptFromFees).Sum(x => x.Fee).ToString("N2") €</b> nicht gezählt wegen keinen/geringen Verkäufen.
                </p>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Where(x => !x.IsExemptFromFees).Sum(x => x.Percentage).ToString("N2") €
                </p>
                <p class="subtitle">
                    Umsatzprovision verdient<br/>
                    <b>@Model.Articles.Where(x => x.IsExemptFromFees).Sum(x => x.Percentage).ToString("N2") €</b> nicht gezählt wegen keinen/geringen Verkäufen.
                </p>
            </div>
        </div>
    </div>
</div>

<div class="columns">
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Count(x => x.IsBlocked)
                </p>
                <p class="subtitle">
                    Artikel blockiert (@((100d / Model.Articles.Count * Model.Articles.Count(x => x.IsBlocked)).ToString("N2")) %)<br/>
                    Davon <b> @Model.ArticlesInternalOnly.Count(x => x.IsBlocked)</b> aus der Mütterrunde
                </p>
            </div>
        </div>
    </div>
    <div class="column">
        <div class="card">
            <div class="card-content has-text-centered">
                <p class="title">
                    @Model.Articles.Where(x => x.IsBlocked).Sum(x => x.Price).ToString("N2") €
                </p>
                <p class="subtitle">
                    Artikelwert blockiert (@((100d / Model.Articles.Sum(x => x.Price) * Model.Articles.Where(x => x.IsBlocked).Sum(x => x.Price)).ToString("N2")) %)<br/>
                    Davon <b> @Model.ArticlesInternalOnly.Where(x => x.IsBlocked).Sum(x => x.Price) €</b> aus der Mütterrunde
                </p>
            </div>
        </div>
    </div>
</div>